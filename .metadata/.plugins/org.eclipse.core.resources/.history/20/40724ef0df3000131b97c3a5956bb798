package test.parser;

import java.io.IOException;
import java.io.Reader;
import java.lang.ProcessBuilder.Redirect;

import test.IpFactory;
import test.ip.IP;

public class Parser1 extends Parser {
	public Parser1() {
	}

	// public Parser1(Reader r) {
	// // super();
	// try {
	// int b = 0;
	// boolean flag = false;
	// StringBuilder buffer = new StringBuilder(20);
	// while ((b = r.read()) != -1) {
	// if ((char) b == '\r') {
	// buffer = new StringBuilder(20);
	// IP ip = IpFactory.getIP(buffer.toString());
	// flag = false;
	// } else if ((char) b != '\n' && !flag) {
	// if ((char) b == '/' || (char) b == ' ') {
	// System.out.println(buffer.toString());
	// IP ip = IpFactory.getIP(buffer.toString());
	// this.addToList(ip);
	// flag = true;
	// } else {
	// buffer.append((char) b);
	// }
	// }
	// }
	// r.close();
	// } catch (IOException e) {
	// e.printStackTrace();
	// } finally {
	// try {
	// r.close();
	// } catch (IOException e) {
	// e.printStackTrace();
	// }
	// }
	// }

	public Parser1(Reader r) {
		// super();
		try {
			// Pattern pattern = Pattern.compile("^([0-9a-fA-F]+[:.]?)+");
			char ch = 0;
			boolean readed = false;
			boolean endOfLine = true;
			StringBuilder buffer = new StringBuilder(50);
			while (true) {
				ch = (char) r.read();
//				System.out.print(ch);
				if (((int) ch) == -1) {
					break;
				} else if ((ch == '/' || ch == ' ') && !readed) {
					System.out.println();
					System.out.println(buffer);
					IP ip = IpFactory.getIP(buffer.toString());
					this.addToList(ip);
					readed = true;
				} else if (ch == '\n') {
					buffer = new StringBuilder(50);
					endOfLine = true;
				} else if (ch != ' ' && endOfLine) {
					System.out.print(ch);
					buffer.append(ch);
					readed = false;
					endOfLine = false;
				} else if(!endOfLine && !readed) {
					System.out.print(ch);
					buffer.append(ch);
					readed = false;
				}
				try {
					Thread.sleep(10);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
			r.close();
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			try {
				r.close();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
	}
}
