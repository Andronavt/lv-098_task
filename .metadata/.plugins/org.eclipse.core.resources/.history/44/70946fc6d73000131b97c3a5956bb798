package test.parser;

import java.io.IOException;
import java.io.Reader;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class Parser1 extends Parser {
	public Parser1() {
	}

	// public Parser1(Reader r) {
	// // super();
	// try {
	// int b = 0;
	// boolean flag = false;
	// StringBuilder buffer = new StringBuilder(20);
	// while ((b = r.read()) != -1) {
	// if ((char) b == '\r') {
	// buffer = new StringBuilder(20);
	// flag = false;
	// } else if ((char) b != '\n' && !flag) {
	// if ((char) b == '/' || (char) b == ' ') {
	// System.out.println(buffer.toString());
	// IP ip = IpFactory.getIP(buffer.toString());
	// this.addToList(ip);
	// flag = true;
	// } else {
	// buffer.append((char) b);
	// }
	// }
	// }
	// r.close();
	// } catch (IOException e) {
	// e.printStackTrace();
	// } finally {
	// try {
	// r.close();
	// } catch (IOException e) {
	// e.printStackTrace();
	// }
	// }
	// }

	public Parser1(Reader r) {
		// super();
		try {
			Pattern pattern = Pattern.compile("^([0-9a-fA-F]+[:.]?)+");
			char ch = 0;
			while (true) {
				ch = (char) r.read();
				if (ch != -1)
					break;
				if(ch == '\r')
					StringBuilder sb = new StringBuilder();
				
				Matcher matcher = pattern.matche();

			}
			r.close();
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			try {
				r.close();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
	}
}
