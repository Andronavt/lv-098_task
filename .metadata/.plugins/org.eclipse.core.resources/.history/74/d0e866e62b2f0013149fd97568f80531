/**
 * 
 */
package strings;

import static staticPack.StaticPrint.print;
import java.util.Map;
import java.util.Set;
import java.util.TreeMap;
import java.util.TreeSet;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * @author orecto
 * 
 */
/*
 * Modify Groups.java to count all of the unique words that do not start with a
 * capital letter
 */
public class Exercise12 {
	static public final String POEM = "Twas brillig, and the slithy toves\n" // 6
																				// -
																				// 5
			+ "Did gyre and gimble in the wabe.\n" // 7 - 6
			+ "All mimsy were the borogoves,\n" // 5 - 4
			+ "And the mome raths outgrabe.\n\n" // 5 - 4
			+ "Beware the Jabberwock, my son,\n" // 5 - 3
			+ "The jaws that bite, the claws that catch.\n" // 8 - 7
			+ "Beware the Jubjub bird, and shun\n" // 6 - 4
			+ "The frumious Bandersnatch."; // 3 - 1

	// 45 - 34
	public static void main(String[] args) {
		// String patternStr = "(^[a-z]|\\s+[a-z])\\w+";
		String patternStr = "([a-z]+)";
		Pattern pattern = Pattern.compile(patternStr);
		Matcher matcher = pattern.matcher(POEM);
		// Set<String> words = new TreeSet<String>();
		// while (matcher.find()) {
		// words.add(matcher.group());
		// }

		Map<String, Integer> map = new TreeMap<>();
		Set<String> words = new TreeSet<String>();
		while (matcher.find()) {
			String str = matcher.group();
			Integer i = map.get(str);
			i = i == null ? 1 : i + 1;
			map.put(str, i);
		}
		Iterator it = 
		while(map.)
		print("The number of unique words that begin with non-capital letters: "
				+ words.size());
		print(words);
		print("Count of unique - unduplicated words:" + map.size());
		print(map);
	}
}
